https://www.udemy.com/11-essential-coding-interview-questions/?couponCode=PROBLEM
https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/
https://www.coursera.org/learn/algorithms-part1
https://www.coursera.org/learn/algorithms-part2
http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html


https://www.hackerrank.com/
https://www.interviewbit.com/
https://leetcode.com/



notes:

Sorting:
know how to sort. Don't do bubble-sort. You should know the details of at least one n*log(n) sorting algorithm,
preferably two (say, quicksort and merge sort). Merge sort can be highly useful in situations where quicksort is
impractical, so take a look at it.


Hashtables:
hashtables are arguably the single most important data structure known to mankind.
You absolutely have to know how they work. Again, it's like one chapter in one data structures book, so just go read about them.
You should be able to implement one using only arrays in your favorite language, in about the space of one interview.


Trees:
you should know about trees. I'm tellin' ya: this is basic stuff, and it's embarrassing to bring it up,
but some of you out there don't know basic tree construction, traversal and manipulation algorithms.
You should be familiar with binary trees, n-ary trees, and leetcode.trie-trees at the very very least.
Trees are probably the best source of practice problems for your long-term warmup exercises.

You should be familiar with at least one flavor of balanced binary tree, whether it's a red/black tree,
a splay tree or an AVL tree. You should actually know how it's implemented.

You should know about tree traversal algorithms: BFS and DFS, and know the difference between inorder, postorder and preorder.


Graphs:
Graphs are, like, really really important. More than you think. Even if you already think they're important,
it's probably more than you think.
There are three basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list),
and you should familiarize yourself with each representation and its pros and cons.

You should know the basic graph traversal algorithms: breadth-first search and depth-first search.
You should know their computational complexity, their tradeoffs, and how to implement them in real code.

You should try to study up on fancier algorithms, such as Dijkstra and A*, if you get a chance.
They're really great for just about anything, from game programming to distributed computing to you name it.
You should know them.

Whenever someone gives you a problem, think graphs. They are the most fundamental and flexible way of representing
any kind of a relationship, so it's about a 50-50 shot that any interesting design problem has a graph involved in it.
Make absolutely sure you can't think of a way to solve it using graphs before moving on to other solution types.
This tip is important!


Operating Systems:
This is just a plug, from me, for you to know about processes, threads and concurrency issues.
A lot of interviewers ask about that stuff, and it's pretty fundamental, so you should know it.
Know about locks and mutexes and semaphores and monitors and how they work.
Know about deadlock and livelock and how to avoid them. Know what resources a processes needs, and a thread needs,
and how context switching works, and how it's initiated by the operating system and underlying hardware.
Know a little about scheduling. The world is rapidly moving towards multi-core, and you'll be a dinosaur in a
real hurry if you don't understand the fundamentals of "modern" (which is to say, "kinda broken") concurrency constructs.


Math:
Some interviewers ask basic discrete math questions. This is more prevalent at Google than at other places I've been,
and I consider it a Good Thing, even though I'm not particularly good at discrete math. We're surrounded by counting
problems, probability problems, and other Discrete Math 101 situations, and those innumerate among us blithely hack
around them without knowing what we're doing.

Don't get mad if the interviewer asks math questions. Do your best. Your best will be a heck of a lot better if you
spend some time before the interview refreshing your memory on (or teaching yourself) the essentials of combinatorics
and probability. You should be familiar with n-choose-k problems and their ilk â€“ the more the better.
